<?xml version="1.0" encoding="UTF-8"?>
<project name="slicer" default="run.tests">
	<property name="src.dir" location="src/main/java" />
	<property name="test.src.dir" location="src/test/java" />

	<property name="lib.dir" location="lib" />
	<property name="compile.lib.dir" location="${lib.dir}/main" />
	<property name="test.lib.dir" location="${lib.dir}/test" />

	<property name="target" location="target" />
	<property name="built.libs.dir" location="${target}/libs" />
	<property name="compiled.classes.dir" location="${target}/build" />
	<property name="test.classes.dir" location="${target}/tests" />

	<property name="build.jar" value="${built.libs.dir}/${ant.project.name}.jar" />


	<property name="report.dir" location="reports" />
	<property name="dist.dir" location="dist" />

	<fileset id="compile.libs" dir="${compile.lib.dir}" />

	<path id="compile.classpath">
		<fileset refid="compile.libs" />
	</path>

	<path id="compile.tests.classpath">
		<pathelement location="${test.classes.dir}" />
		<fileset dir="${built.libs.dir}" />
		<fileset dir="${test.lib.dir}" />
	</path>

	<path id="run.tests.classpath">
		<path refid="compile.tests.classpath" />
		<pathelement location="${test.bin.dir}" />
	</path>

	<fileset id="acceptance.test.classes" dir="${test.classes.dir}">
		<include name="com/dhemery/slicer/test/acceptance/**/*.class"/>
	</fileset>

	<fileset id="unit.test.classes" dir="${test.classes.dir}">
		<include name="com/dhemery/slicer/test/unit/**/*.class"/>
	</fileset>

	<target name="build" depends="build.jar, copy.build.libs" />

	<target name="build.jar" depends="compile.classes">
		<mkdir dir="${built.libs.dir}" />
		<jar basedir="${compiled.classes.dir}" destfile="${build.jar}" />
	</target>

	<target name="compile.classes" depends="init">
		<echo>Compiling ${ant.project.name}</echo>
		<mkdir dir="${compiled.classes.dir}" />
		<javac srcdir="${src.dir}" destdir="${compiled.classes.dir}" includeAntRuntime="false">
			<classpath refid="compile.classpath" />
		</javac>
	</target>

	<target name="clean">
		<delete dir="${target}" quiet="true" />
		<delete dir="${report.dir}" quiet="true" />
	</target>

	<target name="compile.tests" depends="build">
		<mkdir dir="${test.classes.dir}" />
		<javac srcdir="${test.src.dir}" destdir="${test.classes.dir}" includeAntRuntime="false">
			<classpath refid="run.tests.classpath" />
		</javac>
	</target>

	<target name="copy.build.libs">
		<mkdir dir="${built.libs.dir}" />
		<copy todir="${built.libs.dir}">
			<fileset refid="compile.libs" />
		</copy>
	</target>
	
	<target name="dist" depends="run.tests">
		<buildnumber file="version.number"/>
		<property name="version" value="0.1.${build.number}" />
		<property name="dist.jar.name" value="${ant.project.name}-${version}.jar" />
		<echo>Building ${dist.jar.name}</echo>
		<mkdir dir="${dist.dir}" />
		<copy file="${build.jar}" toFile="${dist.dir}/${dist.jar.name}" />
		<copy file="${built.libs.dir}/opencsv-2.3.jar" toDir="${dist.dir}" />
	</target>

	<target name="init">
		<tstamp />
	</target>

	<target name="run.acceptance.tests" depends="compile.tests">
		<run.tests classes="acceptance.test.classes" message="Running acceptance tests" />
	</target>
	
	<target name="run.tests" depends="run.unit.tests, run.acceptance.tests">
		<echo>Creating test report</echo>
		<junitreport todir="${report.dir}">
			<fileset dir="${report.dir}/xml">
				<include name="TEST-*.xml"/>
			</fileset>
			<report format="frames" todir="${report.dir}"/>
		</junitreport>
		<delete dir="${report.dir}/xml" quiet="true" />
	</target>

	<target name="run.unit.tests" depends="compile.tests">
		<run.tests classes="unit.test.classes" message="Running unit tests" />
	</target>
	
	<macrodef name="run.tests">
		<attribute name="message" />
		<attribute name="classes" />
		<sequential>
			<echo>@{message}</echo>
			<mkdir dir="${report.dir}/xml" />
			<junit haltonfailure="true">
				<classpath refid="run.tests.classpath" />
				<batchtest fork="no" todir="${report.dir}/xml">
					<fileset refid="@{classes}" />
					<formatter type="xml" usefile="yes" />
				</batchtest>
			</junit>
		</sequential>
	</macrodef>	
</project>
